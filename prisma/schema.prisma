// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String?
  lastName     String?
  username     String    @unique
  bio          String?
  email        String    @unique
  website      String?
  password     String
  status       Status    @default(BASIC)
  posts        Post[]    @relation("Posts")
  postLikes    Post[]    @relation("PostLikes")
  comments     Comment[]
  commentLikes Comment[] @relation("CommentLikes")
  followers    Int[]
  following    Int[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String?
  published Boolean   @default(false)
  author    User      @relation("Posts", fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  views     Int       @default(0)
  likes     User[]    @relation("PostLikes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  views     Int      @default(0)
  likes     User[]   @relation("CommentLikes")
}

enum Status {
  ADMIN
  BASIC
}
